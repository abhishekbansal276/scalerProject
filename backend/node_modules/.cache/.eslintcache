[{"C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\index.js":"1","C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\App.js":"2","C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\reportWebVitals.js":"3","C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\App.test.js":"4","C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\My Compnents\\Authentication.js":"5","C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\My Compnents\\AllList.js":"6","C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\My Compnents\\Home.js":"7","C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\My Compnents\\TeacherPage.js":"8"},{"size":534,"mtime":1680280202262,"results":"9","hashOfConfig":"10"},{"size":1170,"mtime":1680437084760,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1680279787804,"results":"12","hashOfConfig":"10"},{"size":246,"mtime":1680280017725,"results":"13","hashOfConfig":"10"},{"size":1556,"mtime":1680451546972,"results":"14","hashOfConfig":"10"},{"size":954,"mtime":1680450499337,"results":"15","hashOfConfig":"10"},{"size":7082,"mtime":1680450221999,"results":"16","hashOfConfig":"10"},{"size":7109,"mtime":1680449648640,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"qjv3sj",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\index.js",[],[],[],"C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\App.js",["46"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport AllList from \"./My Compnents/AllList\";\nimport { BrowserRouter as Router, Route, Link, Routes } from \"react-router-dom\";\nimport Authentication from \"./My Compnents/Authentication\";\nimport Home from \"./My Compnents/Home\";\nimport TeacherPage from \"./My Compnents/TeacherPage\"\n\nfunction App() {\n  const [user, setUser] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/api\")\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        setUser(data.employees);\n      });\n  }, []);\n\n  return (\n    <>\n      <Router>\n        <Routes>\n          <Route path=\"/\" Component={(props) => <AllList user={user} />} />\n          <Route\n            path=\"/authentication\"\n            Component={(props) => <Authentication user={user} />}\n          ></Route>\n          <Route\n            path=\"/home\"\n            Component={(props) => <Home user={user} />}\n          ></Route>\n          <Route\n            path=\"/teacherPage\"\n            Component={(props) => <TeacherPage user={user} />}\n          ></Route>\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\reportWebVitals.js",[],[],"C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\App.test.js",[],[],"C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\My Compnents\\Authentication.js",["47","48","49","50"],[],"C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\My Compnents\\AllList.js",[],[],"C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\My Compnents\\Home.js",["51","52","53","54","55","56","57","58","59","60"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"../Home.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Home(props) {\r\n  const userUid = localStorage.getItem(\"userUid\");\r\n\r\n  const [totalStudentsHave, setTotalStudentsHave] = useState(\"\");\r\n  const [takeList, setTake] = useState([]);\r\n\r\n  useEffect(() => {\r\n    props.user.forEach((item) => {\r\n      if (item.uid === userUid) {\r\n        setTotalStudentsHave(item.totalStudents);\r\n      }\r\n    });\r\n  }, \"\");\r\n\r\n  const [students, setStudent] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/student\")\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setStudent(data.student);\r\n      });\r\n  }, []);\r\n\r\n  async function UpdateStudentCountTeacher() {\r\n    const res = await fetch(\"http://localhost:5000/updateStudentCountTeacher\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({ uid: userUid }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (res.status === 201) {\r\n      const val = await res.json();\r\n      setTotalStudentsHave(val.toStu);\r\n    }\r\n  }\r\n\r\n  async function UpdateStudentCountTeacherAfterRemove() {\r\n    const res = await fetch(\r\n      \"http://localhost:5000/updateStudentCountTeacherAfterRemove\",\r\n      {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        body: JSON.stringify({ uid: userUid }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n\r\n    if (res.status === 201) {\r\n      const val = await res.json();\r\n      setTotalStudentsHave(val.toStu);\r\n    }\r\n  }\r\n\r\n  async function AddStudentToTeacher(name) {\r\n    const res = await fetch(\"http://localhost:5000/addStudentToTeacher\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({ uid: userUid, stuName: name }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const val = await res.json();\r\n      SetStudentList(name);\r\n    }\r\n  }\r\n\r\n  async function RemoveStudentToTeacher(name) {\r\n    const res = await fetch(\"http://localhost:5000/removeStudentToTeacher\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({ uid: userUid, stuName: name }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const val = await res.json();\r\n      RemoveFromStudentList(name);\r\n    }\r\n  }\r\n\r\n  async function RemoveFromStudentList(name) {\r\n    const res = await fetch(\"http://localhost:5000/removeFromStudentList\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({ uid: userUid, name: name }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const val = await res.json();\r\n      UpdateStudentToZero(name);\r\n      UpdateStudentCountTeacherAfterRemove();\r\n    }\r\n  }\r\n\r\n  async function SetStudentList(name) {\r\n    const res = await fetch(\"http://localhost:5000/setStudentList\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({ uid: userUid, name: name }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const val = await res.json();\r\n    }\r\n  }\r\n\r\n  async function ReturnStudentList() {\r\n    const res = await fetch(\"http://localhost:5000/returnStudentList\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({ uid: userUid }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    let val;\r\n    if (res.status === 200) {\r\n      val = await res.json();\r\n      setTake(val);\r\n    }\r\n  }\r\n\r\n  async function UpdateStudentToOne(name) {\r\n    const res = await fetch(\"http://localhost:5000/updateStudent\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({ name: name }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    if (res.status === 200) {\r\n      const val = await res.json();\r\n      setStudent(val.student);\r\n    }\r\n  }\r\n\r\n  async function UpdateStudentToZero(name) {\r\n    const res = await fetch(\"http://localhost:5000/updateStudentToZero\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({ name: name }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    if (res.status === 200) {\r\n      const val = await res.json();\r\n      setStudent(val.student);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"outer\">\r\n      <div id=\"div1\">\r\n        <p className=\"stuName1\">Select alteast 3 and maximum 4 students</p>\r\n        <br />\r\n        <p id=\"noStudentP\">All students are assigned</p>\r\n        <div id=\"grid\">\r\n          {students.map((value, index) => {\r\n            if (value.assigned == 0) {\r\n              document.getElementById(\"noStudentP\").style.display = \"none\";\r\n              return (\r\n                <div className=\"gridDiv\">\r\n                  <p className=\"nameP\">{value.name}</p>\r\n                  <button\r\n                    onClick={() => {\r\n                      if (parseInt(totalStudentsHave) < 4) {\r\n                        UpdateStudentToOne(value.name);\r\n                        UpdateStudentCountTeacher();\r\n                        AddStudentToTeacher(value.name);\r\n                      } else {\r\n                        alert(\"Can't add more\");\r\n                      }\r\n                    }}\r\n                  >\r\n                    Take\r\n                  </button>\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"div2\">\r\n      <p className=\"stuName1\">List of students assigned to you</p>\r\n        <button\r\n          onClick={() => {\r\n            ReturnStudentList();\r\n          }}\r\n        >\r\n          Update\r\n        </button>\r\n        <p className=\"stuName1\">Click on update button to update</p>\r\n        <br />\r\n        <div>\r\n          {\r\n            <div id=\"grid\">\r\n              {Object.keys(takeList).map((keys) => {\r\n                return (\r\n                  <div className=\"gridDiv\">\r\n                    <p className=\"stuName1\">\r\n                      {takeList[`${keys}`] != \"\"\r\n                        ? takeList[`${keys}`]\r\n                        : \"No one\"}\r\n                    </p>\r\n                    <button\r\n                      onClick={() => {\r\n                        takeList[`${keys}`] != \"\"\r\n                          ? RemoveStudentToTeacher(takeList[`${keys}`])\r\n                          : alert(\"No student assigent\");\r\n                      }}\r\n                    >\r\n                      Remove\r\n                    </button>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          }\r\n        </div>\r\n        <br />\r\n        {totalStudentsHave>=3?<Link to={\"/teacherPage\"}>\r\n          <button type=\"button\" id=\"nextbtn\">Next</button>\r\n        </Link>:<div/>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abhib\\Desktop\\ScalerAcademyProject\\project-scaler\\src\\My Compnents\\TeacherPage.js",["61","62","63","64","65","66","67","68","69","70"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"../Home.css\";\r\nimport \"../Authentication.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function TeacherPage() {\r\n  const [takeList, setTake] = useState([]);\r\n  const [listMarks, setListMarks] = useState([]);\r\n  const [marks1, stMarks1] = useState(\"0\");\r\n  const [marks2, stMarks2] = useState(\"0\");\r\n  const [marks3, stMarks3] = useState(\"0\");\r\n  const [marks4, stMarks4] = useState(\"0\");\r\n  const [marks5, stMarks5] = useState(\"0\");\r\n  const [marks6, stMarks6] = useState(\"0\");\r\n\r\n  const userUid = localStorage.getItem(\"userUid\");\r\n\r\n  async function ReturnStudentList() {\r\n    const res = await fetch(\"http://localhost:5000/returnStudentList\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({ uid: userUid }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    let val;\r\n    if (res.status === 200) {\r\n      val = await res.json();\r\n      setTake(val);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    ReturnStudentList();\r\n  }, []);\r\n\r\n  async function addMarks(totalMarks, name) {\r\n    const res = await fetch(\"http://localhost:5000/updateMarks\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({\r\n        uid: userUid,\r\n        name: name,\r\n        totalMarks: totalMarks,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    let val;\r\n    if (res.status === 200) {\r\n      val = await res.json();\r\n    }\r\n    if (res.status === 300) {\r\n      alert(\"Can't update now\");\r\n    }\r\n  }\r\n\r\n  async function getMarks() {\r\n    const res = await fetch(\"http://localhost:5000/getMarks\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({\r\n        uid: userUid,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    let val;\r\n    if (res.status === 200) {\r\n      val = await res.json();\r\n      setListMarks(val);\r\n    }\r\n  }\r\n\r\n  async function finalSubmit(name) {\r\n    const res = await fetch(\"http://localhost:5000/finalSubmit\", {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      body: JSON.stringify({\r\n        uid: userUid,\r\n        name: name,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    let val;\r\n    if (res.status === 200) {\r\n      val = await res.json();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"outer\">\r\n      <div id=\"div1\">\r\n        {\r\n          <div id=\"grid\">\r\n            {Object.keys(takeList).map((keys) => {\r\n              return (\r\n                <div className=\"gridDiv\">\r\n                  <p className=\"stuName1\">\r\n                    {takeList[`${keys}`] != \"\" ? takeList[`${keys}`] : \"No one\"}\r\n                  </p>\r\n                  <button\r\n                    onClick={() => {\r\n                      let tMarks =\r\n                        parseInt(marks1) +\r\n                        parseInt(marks2) +\r\n                        parseInt(marks3) +\r\n                        parseInt(marks4) +\r\n                        parseInt(marks5) +\r\n                        parseInt(marks6);\r\n                      takeList[`${keys}`] != \"\"\r\n                        ? addMarks(tMarks, takeList[`${keys}`])\r\n                        : alert(\"No student assigned here\");\r\n                    }}\r\n                  >\r\n                    Assign marks\r\n                  </button>\r\n\r\n                  <button\r\n                    onClick={() => {\r\n                      finalSubmit(takeList[`${keys}`]);\r\n                    }}\r\n                  >\r\n                    Final submit\r\n                  </button>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        }\r\n        <div>\r\n          <button onClick={getMarks}>Show marks</button>\r\n\r\n          <div id=\"grid\">\r\n            {listMarks.map((keys) => {\r\n              return (\r\n                <div className=\"gridDiv\">\r\n                  <p className=\"stuName1\">{keys.name}</p>\r\n                  <p className=\"stuName1\">Total marks - {keys.marks}</p>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"div2\">\r\n        <div className=\"container\">\r\n          <p>Give marks on parameters</p>\r\n          <p>\r\n            And click on assign marks of perticular student to whom you want to\r\n            assign marks\r\n          </p>\r\n          <form>\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Timeframe ...\"\r\n              value={marks1}\r\n              onChange={(e) => stMarks1(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Budget ...\"\r\n              value={marks2}\r\n              onChange={(e) => stMarks2(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Quality ...\"\r\n              value={marks3}\r\n              onChange={(e) => stMarks3(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Scope ...\"\r\n              value={marks4}\r\n              onChange={(e) => stMarks4(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Stakeholder satisfaction ...\"\r\n              value={marks5}\r\n              onChange={(e) => stMarks5(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Sustainability ...\"\r\n              value={marks6}\r\n              onChange={(e) => stMarks6(e.target.value)}\r\n            />\r\n            <br />\r\n          </form>\r\n        </div>\r\n        <div className=\"outer\">\r\n          <div id=\"div1\">\r\n            <button\r\n              onClick={() => {\r\n                getMarks();\r\n                console.log(\"Inside btn 1 \", listMarks);\r\n              }}\r\n            >\r\n              Final marks students\r\n            </button>\r\n            <div id=\"grid\">\r\n              {listMarks.map((keys, index) => {\r\n                if(keys.finalOrNot == 1){\r\n                    return (\r\n                        <div className=\"gridDiv\">\r\n                          <p className=\"stuName1\">{keys.name}</p>\r\n                        </div>\r\n                      );\r\n                }\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <div id=\"div2\">\r\n            <button\r\n              onClick={() => {\r\n                getMarks();\r\n                console.log(\"Inside btn 1 \", listMarks);\r\n              }}\r\n            >\r\n              Not final marks students\r\n            </button>\r\n            <div id=\"grid\">\r\n              {listMarks.map((keys, index) => {\r\n                if(keys.finalOrNot == 0){\r\n                    return (\r\n                        <div className=\"gridDiv\">\r\n                          <p className=\"stuName1\">{keys.name}</p>\r\n                        </div>\r\n                      );\r\n                }\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"71","severity":1,"message":"72","line":4,"column":42,"nodeType":"73","messageId":"74","endLine":4,"endColumn":46},{"ruleId":"71","severity":1,"message":"75","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"76","severity":1,"message":"77","line":34,"column":15,"nodeType":"78","messageId":"79","endLine":36,"endColumn":16},{"ruleId":"76","severity":1,"message":"77","line":37,"column":15,"nodeType":"78","messageId":"79","endLine":39,"endColumn":16},{"ruleId":"76","severity":1,"message":"77","line":40,"column":15,"nodeType":"78","messageId":"79","endLine":43,"endColumn":16},{"ruleId":"80","severity":1,"message":"81","line":17,"column":6,"nodeType":"82","endLine":17,"endColumn":8},{"ruleId":"80","severity":1,"message":"83","line":17,"column":6,"nodeType":"82","endLine":17,"endColumn":8,"suggestions":"84"},{"ruleId":"71","severity":1,"message":"85","line":77,"column":13,"nodeType":"73","messageId":"74","endLine":77,"endColumn":16},{"ruleId":"71","severity":1,"message":"85","line":93,"column":13,"nodeType":"73","messageId":"74","endLine":93,"endColumn":16},{"ruleId":"71","severity":1,"message":"85","line":109,"column":13,"nodeType":"73","messageId":"74","endLine":109,"endColumn":16},{"ruleId":"71","severity":1,"message":"85","line":126,"column":13,"nodeType":"73","messageId":"74","endLine":126,"endColumn":16},{"ruleId":"86","severity":1,"message":"87","line":183,"column":40,"nodeType":"88","messageId":"89","endLine":183,"endColumn":42},{"ruleId":"90","severity":1,"message":"91","line":184,"column":32,"nodeType":"92","messageId":"93","endLine":184,"endColumn":34},{"ruleId":"90","severity":1,"message":"94","line":227,"column":44,"nodeType":"92","messageId":"93","endLine":227,"endColumn":46},{"ruleId":"90","severity":1,"message":"94","line":233,"column":45,"nodeType":"92","messageId":"93","endLine":233,"endColumn":47},{"ruleId":"71","severity":1,"message":"72","line":4,"column":10,"nodeType":"73","messageId":"74","endLine":4,"endColumn":14},{"ruleId":"80","severity":1,"message":"95","line":36,"column":6,"nodeType":"96","endLine":36,"endColumn":8,"suggestions":"97"},{"ruleId":"71","severity":1,"message":"85","line":53,"column":7,"nodeType":"73","messageId":"74","endLine":53,"endColumn":10},{"ruleId":"71","severity":1,"message":"85","line":92,"column":7,"nodeType":"73","messageId":"74","endLine":92,"endColumn":10},{"ruleId":"90","severity":1,"message":"94","line":105,"column":42,"nodeType":"92","messageId":"93","endLine":105,"endColumn":44},{"ruleId":"90","severity":1,"message":"94","line":116,"column":43,"nodeType":"92","messageId":"93","endLine":116,"endColumn":45},{"ruleId":"86","severity":1,"message":"87","line":210,"column":44,"nodeType":"88","messageId":"89","endLine":210,"endColumn":46},{"ruleId":"90","severity":1,"message":"91","line":211,"column":36,"nodeType":"92","messageId":"93","endLine":211,"endColumn":38},{"ruleId":"86","severity":1,"message":"87","line":232,"column":44,"nodeType":"88","messageId":"89","endLine":232,"endColumn":46},{"ruleId":"90","severity":1,"message":"91","line":233,"column":36,"nodeType":"92","messageId":"93","endLine":233,"endColumn":38},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","Literal","React Hook useEffect has missing dependencies: 'props.user' and 'userUid'. Either include them or remove the dependency array.",["98"],"'val' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'ReturnStudentList'. Either include it or remove the dependency array.","ArrayExpression",["99"],{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [props.user, userUid]",{"range":"104","text":"105"},"Update the dependencies array to be: [ReturnStudentList]",{"range":"106","text":"107"},[493,495],"[props.user, userUid]",[1066,1068],"[ReturnStudentList]"]